package com.mkpits.books;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;




public class BooksDbUtility {

  private  DataSource dataSource;
  
  public BooksDbUtility(DataSource dataSource) {
	  
	  this.dataSource = dataSource;
  }
  
  public List<Book_DatabaseModel> getBooks(String offset) throws Exception {
	    List<Book_DatabaseModel> books = new ArrayList<>();

	    Connection myConn = null;
	    PreparedStatement myStmt = null;
	    ResultSet myRs = null;

	    try {
	        int offsetNo = Integer.parseInt(offset);

	        myConn = dataSource.getConnection();

	        // Create a SQL statement
	        String sql = "SELECT * FROM books LIMIT 5 OFFSET ?";
	        myStmt = myConn.prepareStatement(sql);

	        myStmt.setInt(1, offsetNo);

	        // Execute SQL query
	        myRs = myStmt.executeQuery();

	        // Process the result set
	        while (myRs.next()) {
	            int id = myRs.getInt("id");
	            String title = myRs.getString("title");
	            String author = myRs.getString("author");
	            String date = myRs.getString("date");
	            String genres = myRs.getString("genres");
	            String characters = myRs.getString("characters");
	            String synopsis = myRs.getString("synopsis");

	            // Create new Book_DatabaseModel object
	            Book_DatabaseModel tempbooks = new Book_DatabaseModel(id, title, author, date, genres, characters, synopsis);

	            // Add it to the list of books
	            books.add(tempbooks);
	        }
	    } catch (Exception e) {
	        e.printStackTrace();
	    } finally {
	        close(myConn, myStmt, myRs);
	    }
	    return books;
	}


private  void close(Connection myConn, Statement myStmt, ResultSet myRs) {
	try {
		if(myRs != null) {
			myRs.close();
		}
		if(myStmt != null) {
			myStmt.close();
		}
		if(myConn != null) {
			myStmt.close();
	}
	}catch (Exception e) {
		e.printStackTrace();
	}
	
}

public  void deleteBook(String bookId) throws SQLException {
	Connection myConn = null;
	PreparedStatement myStmt = null;
	try {
		// convert student to integer
		int theBookId = Integer.parseInt(bookId);

		// get db connection

		myConn = dataSource.getConnection();

		// create sql to get update student
		String sql = "delete from books where id = ?";

		// create a prepared statement
		myStmt = myConn.prepareStatement(sql);
		
		//set params
		myStmt.setInt(1, theBookId);
		
		//execute sql
		myStmt.execute();
	} finally {
		close(myConn, myStmt, null);
	}

}

public void updateBook(Book_DatabaseModel theBook) throws SQLException {
	Connection myConn = null;
	PreparedStatement myStmt = null;
	try {

		// get db connection

		myConn = dataSource.getConnection();

		// create sql to get update student
		String sql = "update books set title = ?,author = ?, date = ? , genres = ?, characters = ? , synopsis = ? where id = ?";

		// create a prepared statement
		myStmt = myConn.prepareStatement(sql);

		// set params
		myStmt.setString(1, theBook.getTitle());
		myStmt.setString(2, theBook.getAuthor());
		myStmt.setString(3, theBook.getDate());
		myStmt.setString(4, theBook.getGenres());
		myStmt.setString(5, theBook.getCharacters());
		myStmt.setString(6, theBook.getSynopsis());
		myStmt.setInt(7, theBook.getId());


		

		// execute SQL statement
		myStmt.execute();

	} finally {
		close(myConn, myStmt, null);
	}

	
}

public  Book_DatabaseModel loadBook(String theBookId) {
	Book_DatabaseModel theBook = null;
	Connection myConn = null;
	PreparedStatement myStmt = null;
	ResultSet myRs = null;
	int bookId;

	try {
		// convert student id into integer
		bookId = Integer.parseInt(theBookId);

		// get database connection
		myConn = dataSource.getConnection();

		// create sql to get selected student
		String sql = "select * from books where id = ?";

		// create a prepared statement
		myStmt = myConn.prepareStatement(sql);

		// set params
		myStmt.setInt(1, bookId);

		// execute statement
		myRs = myStmt.executeQuery();

		// retrive data from result set row
		if (myRs.next()) {
			String title = myRs.getString("title");
			String author = myRs.getString("author");
			String date = myRs.getString("date");
			String genres = myRs.getString("genres");
			String characters = myRs.getString("characters");
			String synopsis = myRs.getString("synopsis");


			// use the studentid during constrction
			theBook = new Book_DatabaseModel(bookId, title, author, date, genres, characters, synopsis);
		} else {
			throw new Exception("Could not find Bookid " + bookId);
		}
	} catch (Exception e) {
		e.printStackTrace();
	} finally {
		close(myConn, myStmt, myRs);
	}
	return theBook;
}

public  void addBook(Book_DatabaseModel theBook) {
	Connection myConn = null;
	PreparedStatement myStmt = null;

	try {
		// get db connection
		myConn = dataSource.getConnection();

		// create sql for insert
		String sql = "insert into books (title,author,date,genres,characters,synopsis) values(?,?,?,?,?,?)";
		myStmt = myConn.prepareStatement(sql);

		// set the param values for the student
		myStmt.setString(1, theBook.getTitle());
		myStmt.setString(2, theBook.getAuthor());
		myStmt.setString(3, theBook.getDate());
		myStmt.setString(4, theBook.getGenres());
		myStmt.setString(5, theBook.getCharacters());
		myStmt.setString(6, theBook.getSynopsis());


		// execute SQL insert
		myStmt.execute();
	} catch (Exception e) {
		e.printStackTrace();
	} finally {
		close(myConn, myStmt, null);
	}
	
}

}
