package com.mkpits.books;

import java.io.IOException;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;

import com.mkpits.books.Book_DatabaseModel;

/**
 * Servlet implementation class BookControllerServletNew
 */
@WebServlet("/BookControllerServletNew")
public class BookControllerServletNew extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#HttpServlet()
	 */

	public BookControllerServletNew() {
		super();
		// TODO Auto-generated constructor stub
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */

	private BooksDbUtility bookDbUtil;
	@Resource(name = "jdbc/books_data")
	private DataSource dataSource;

	// resource db Ska use connection establish karne k liye hota h database se
	/**
	 * @see Servlet#init(ServletConfig)
	 */
	@Override
	public void init() throws ServletException
	/// in it method is used to stablish connection pool
	{
		// TODO Auto-generated method stub
		super.init();
		// create our student db util... and pass in the conn pool/datasource

		try {
			bookDbUtil = new BooksDbUtility(dataSource);
		} catch (Exception exc) {
			throw new ServletException(exc);
		}
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		try {
			// read the "command" parameter
			String theCommand = request.getParameter("command");
			System.out.println(theCommand);
			// if the command is missing, then default to listing student

			if (theCommand == null) {
				theCommand = "LIST";
			}

			// route to the appropriate method
			switch (theCommand) {
			case "LIST":
				listBooks(request, response);
				break;
			case "ADD":
				addBook(request, response);
				break;
			case "LOAD":
				loadBook(request, response);
				break;
			case "UPDATE":
				updateBook(request, response);
				break;
			case "DELETE":
				deleteBook(request, response);
				break;
			default:
				listBooks(request, response);
			}
		} catch (Exception e) {
			throw new ServletException();
		}
	}

	private void deleteBook(HttpServletRequest request, HttpServletResponse response) throws Exception {
		// read book id from form data
		String bookId = request.getParameter("bookId");

		// delete book from database
		bookDbUtil.deleteBook(bookId);

		// send back to again "list-book.jsp"
		listBooks(request, response);

	}

	private void updateBook(HttpServletRequest request, HttpServletResponse response) throws Exception {
		// read student id from form data
		String bookId = request.getParameter("bookId");
		int id = Integer.parseInt(bookId);

//		// read book data from form

		String title = request.getParameter("title");
		String author = request.getParameter("author");
		String date = request.getParameter("date");
		String genres = request.getParameter("genres");
		String characters = request.getParameter("characters");
		String synopsis = request.getParameter("synopsis");

		// create a new book object
		Book_DatabaseModel theBook = new Book_DatabaseModel(id, title, author, date, genres, characters, synopsis);

		// perform update on database
		bookDbUtil.updateBook(theBook);

		// send them back to the list "list-students" page
		listBooks(request, response);

	}

	private void loadBook(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// read book id from form data
		String theBookId = request.getParameter("bookId");

		// get student from database (dbutility)
		Book_DatabaseModel theBook = bookDbUtil.loadBook(theBookId);

		// place student in the request attribute
		request.setAttribute("THE_BOOK", theBook);

		// send to JSP page view
		RequestDispatcher dispatcher = request.getRequestDispatcher("/update_list_book.jsp");
		dispatcher.forward(request, response);
	}

	private void addBook(HttpServletRequest request, HttpServletResponse response) throws Exception {

		// read book data from form

		String title = request.getParameter("title");
		String author = request.getParameter("author");
		String date = request.getParameter("date");
		String genres = request.getParameter("genres");
		String characters = request.getParameter("characters");
		String synopsis = request.getParameter("synopsis");

		// create new Student_Model object
		Book_DatabaseModel theBook = new Book_DatabaseModel(title, author, date, genres, characters, synopsis);

		//// add student to the database
		bookDbUtil.addBook(theBook);

		// send back to main page (the student list)
		listBooks(request, response);
	}

	private void listBooks(HttpServletRequest request, HttpServletResponse response) throws Exception {

		List<Book_DatabaseModel> books = bookDbUtil.getBooks("1");

		// add students to the request
		request.setAttribute("BOOK_LIST", books);

		// send to JSP page(view)
		RequestDispatcher dispatcher = request.getRequestDispatcher("/list_book_button.jsp");
		dispatcher.forward(request, response);

	}

}
